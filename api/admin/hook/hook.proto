syntax = "proto3";

package api.admin.hook;

import "google/api/annotations.proto";
import "buf/validate/validate.proto";
import "admin/model.proto";
import "enum.proto";
import "global.proto";

option go_package = "github.com/aide-family/moon/api/admin/hook;hook";
option java_multiple_files = true;
option java_package = "api.admin.hook";

// hook应用
service Hook {
  // 创建hook
  rpc CreateHook (CreateHookRequest) returns (CreateHookReply){
    option (google.api.http) = {
      post: "/v1/hook/create"
      body: "*"
    };
  };

  // 更新hook
  rpc UpdateHook (UpdateHookRequest) returns (UpdateHookReply){
    option (google.api.http) = {
      put: "/v1/hook/{id}"
      body: "*"
    };
  };

  // 更新hook状态
  rpc UpdateHookStatus (UpdateHookStatusRequest) returns (UpdateHookStatusReply){
    option (google.api.http) = {
      put: "/v1/hook/update/status"
      body: "*"
    };
  };

  // 删除hook
  rpc DeleteHook (DeleteHookRequest) returns (DeleteHookReply){
    option (google.api.http) = {
      delete: "/v1/hook/delete/{id}"
    };
  };

  // 获取hook详情
  rpc GetHook (GetHookRequest) returns (GetHookReply){
    option (google.api.http) = {
      get: "/v1/hook/detail/{id}"
    };
  };

  // 获取hook列表
  rpc ListHook (ListHookRequest) returns (ListHookReply){
    option (google.api.http) = {
      post: "/v1/hook/list"
      body: "*"
    };
  };

  // 获取hook下拉列表
  rpc ListHookSelectList (ListHookRequest) returns (ListHookSelectListReply){
    option (google.api.http) = {
      post: "/v1/hook/select/list"
      body: "*"
    };
  }
}

// 创建hook
message CreateHookRequest {
  // hook名称
  string name = 1 [(buf.validate.field).cel = {
    message: "hook名称长度限制在1-20个字符",
    expression: "this.size() >= 1 && this.size() <= 20"
  }];
  // hook说明信息
  string remark = 2 [(buf.validate.field).cel = {
    message: "hook说明长度限制在0-200个字符",
    expression: "this.size() <= 200"
  }];
  // url地址
  string url = 3;
  // hook secret
  string secret = 4;
  // hook应用
  HookApp hookApp = 5;
  // hook状态
  Status status = 6;
}
message CreateHookReply {}

// 更新hook
message UpdateHookRequest {
  // hook id
  uint32 id = 1;
  // 更新内容
  CreateHookRequest update = 2 [(buf.validate.field).required = true];
}
message UpdateHookReply {}

message DeleteHookRequest {
  uint32 id = 1;
}
message DeleteHookReply {}

message GetHookRequest {
  uint32 id = 1;
}
message GetHookReply {
  AlarmHookItem detail = 1;
}

// hook 列表
message ListHookRequest {
  // 分页参数
  PaginationReq pagination = 1 [(buf.validate.field).required = true];
  // 关键字模糊查询
  string keyword = 2 [(buf.validate.field).cel = {
    message: "关键字模糊查询长度限制在0-20个字符",
    expression: "this.size() <= 20"
  }];
  // 状态查询
  Status status = 3;
  // hook应用
  repeated HookApp hookApp = 5;
  // Name
  string name = 6 [(buf.validate.field).cel = {
    message: "名称长度限制在0-20个字符",
    expression: "this.size() <= 20"
  }];
}
message ListHookReply {
  repeated AlarmHookItem list = 1;
  // 分页信息
  PaginationReply pagination = 2;
}

// 更新hook状态
message UpdateHookStatusRequest {
  // ID列表
  repeated uint32 ids = 1 [(buf.validate.field).cel = {
    expression: "this.size() >= 1"
    message: "请选择正确的Hook数据"
  }];
  // 启用状态
  Status status = 2 [(buf.validate.field).cel = {
    expression: "this in [1, 2]"
    message: "请选择正确的启用状态, 启用(1);禁用(2)"
  }];
}
message UpdateHookStatusReply{}

message ListHookSelectListReply {
  repeated SelectItem list = 1;
}